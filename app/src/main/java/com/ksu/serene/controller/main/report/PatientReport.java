package com.ksu.serene.controller.main.report;

//import all widget types we're going to write into

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.ArrayList;
import java.util.concurrent.ExecutionException;

import android.annotation.SuppressLint;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;

import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.RequestFuture;
import com.android.volley.toolbox.Volley;
import com.bumptech.glide.Glide;


import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;


import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.Timestamp;
import com.google.firebase.auth.FirebaseAuth;

import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;
import com.google.firebase.firestore.QuerySnapshot;
import com.google.maps.android.heatmaps.WeightedLatLng;
import com.google.android.gms.maps.model.LatLng;
import com.ksu.serene.controller.Constants;
import com.ksu.serene.model.Location;
import com.ksu.serene.R;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class PatientReport extends AppCompatActivity {

    //improvement_num : calculated improvement throughout AL graph, highestday_date= date of highest day of AL in graph
    private TextView improvement_num, noResult;
    private String duration;

    private Button generate_report_btn;
    private String startDate;
    private String endDate;

    private FirebaseAuth mAuth;
    private String userId;
    public FirebaseFirestore firebaseFirestore = FirebaseFirestore.getInstance();

    private ImageView ALGraph ;
    private TextView reportDuration, improvementNum, Highestday_date, location_name, numOfDays, location_AL;
    private RecyclerView locationRecyclerView;
    private locationsAdapter locationAdapter;
    private ImageView backBtn;


    private ArrayList<Location> highLocations;
    public static ArrayList<WeightedLatLng> locations;


    private String[] nearbyLocation;
    private Button showHeatmap;


    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.patient_report);

        getSupportActionBar().hide();

        // get Duration
        getExtras();

        init();
        userId = mAuth.getCurrentUser().getUid();


        // bring the info of the report which generated by the server side
        // this includes AL graph & improvements
        lastGeneratedPatientReport();

        // set high location ryc
        location();

        // set nearby loc TV
        //nearbyLocation2();

    }//onCreate

    private void init (){
        mAuth = FirebaseAuth.getInstance();
        ALGraph = findViewById(R.id.AL_graph);
        improvement_num = findViewById(R.id.improvement_num);
        //highestday_date = findViewById(R.id.highestday_date);

        noResult = findViewById(R.id.noResult);

        reportDuration = findViewById(R.id.reportDuration);
        reportDuration.setText(reportDate());
        locationRecyclerView = findViewById(R.id.recycleView);

        backBtn = findViewById(R.id.backButton);
        backBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                finish();
            }
        });


        showHeatmap = findViewById(R.id.heatmap);

        showHeatmap.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                heatmapActivity();
            }
        });
    }

    private String reportDate() {

        String interval;

        Date startD;
        String start="", end;


        DateFormat dateFormat = new SimpleDateFormat("d MMM");

        Calendar cal = Calendar.getInstance();

        end = dateFormat.format(cal.getTime());


        switch(duration){
            case "2week":

                cal.add(Calendar.DATE, -14);
                startD = cal.getTime();

                start = dateFormat.format(startD);

                break;

            case "month":

                cal.add(Calendar.MONTH, -1);
                startD = cal.getTime();

                start = dateFormat.format(startD);

                break;

            case "custom":

                start = dateFormat.format(startDate);
                end = dateFormat.format(endDate);

                break;

        }//end of switch

        interval = start + " - " + end;
        return interval;

    }

    private void heatmapActivity() {

        if ( ! locations.isEmpty() )
        startActivity(new Intent(PatientReport.this, LocationHeatMap.class));

        // TODO : ADD LOCATION LIST AS EXTRAS

    }

    private void lastGeneratedPatientReport() {
        Task<QuerySnapshot> docRef = firebaseFirestore.collection("LastGeneratePatientReport")
                .whereEqualTo("patientID", userId)
                .get()
                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
                    @SuppressLint("SetTextI18n")
                    @Override
                    public void onComplete(@NonNull Task<QuerySnapshot> task) {
                        if(task.isSuccessful()){

                            // assume that the patient has only one Doc contains his info
                            int counter = 0;
                            for (QueryDocumentSnapshot document : task.getResult()) {
                                counter++;
                            }

                            if (counter == 1){

                                List<DocumentSnapshot> doc = task.getResult().getDocuments();

                                //improvement
//                                String improvement = doc.get(0).get("improvement").toString();
//                                improvement_num.setText(improvement + " %");

                                //graph
                                String img  = doc.get(0).get("anxietyLevelGraph").toString();
                                Glide.with(PatientReport.this)
                                        .load(img + "")
                                        .into(ALGraph);

                                //highest day
//                                String date = doc.get(0).get("highestDay").toString();
//                                highestday_date.setText(date);

//                                String date = ((Timestamp)doc.get(0).get("highestDay")).toDate().toString();
//                                highestday_date.setText(date);


                            }//if


                        }//if
                    }// onComplete
                }).addOnFailureListener(new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception e) {

                    }
                });//addOnCompleteListener


    }//lastGeneratedPatientReport

    private void location() {

        highLocations = new ArrayList<Location>();
        locations = new ArrayList<WeightedLatLng>();

        locationRecyclerView.setLayoutManager(new LinearLayoutManager(this));

        firebaseFirestore.collection("PatientLocations")
                .whereEqualTo("patientID", userId)
                .get()
                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
                    @SuppressLint("SetTextI18n")
                    @Override
                    public void onComplete(@NonNull Task<QuerySnapshot> task) {

                        if(task.isSuccessful()){

                            boolean locationFound = false;

                            for (QueryDocumentSnapshot document : task.getResult()) {


                                // Check for locations date if it's within selected duration

                                Date loc_date = ((Timestamp) document.get("time")).toDate();
                                Date today = new Date(); // Today

                                long calcDuration = daysBetween(loc_date,today);

                                switch(duration){
                                    case "2week":
                                        if (calcDuration<15) {
                                            locationFound = true;
                                            break; //get out of switch and proceed to save other attributes
                                        }
                                        else{
                                            locationFound = false;
                                            break;
                                        }

                                    case "month":
                                        if (calcDuration<31){
                                            locationFound = true;
                                            break;
                                        }
                                        else{
                                            locationFound = false;
                                            break;
                                        }

                                    case "custom":
                                        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
                                        Date startDate1 = null, endDate1 = null;
                                        try {
                                            startDate1 = formatter.parse(startDate);
                                            endDate1 = formatter.parse(endDate);
                                        } catch (ParseException e) {
                                            e.printStackTrace();
                                        }

                                        if (startDate1.compareTo(loc_date)*loc_date.compareTo(endDate1)>=0){//if date is between start date and end date
                                            locationFound = true;
                                            break;
                                        }
                                        else{
                                            locationFound = false;
                                            break;
                                        }

                                }//end of switch

                                if (locationFound) {

                                    showHeatmap.setEnabled(true);
                                    noResult.setVisibility(View.GONE);


                                    String locationName = document.get("name").toString();
                                    double lat = (double) document.get("lat");
                                    double lng;
                                    try {
                                         lng = (double) document.get("lng");

                                    }catch (NullPointerException e){
                                         lng = (double) document.get("lon");

                                    }
                                    String anxietyLevel = document.get("anxietyLevel").toString();
                                    String nearestLocs = document.get("nearestLoc").toString();


                                    Double loc_AL = Double.parseDouble(anxietyLevel);

                                    switch (anxietyLevel){
                                        case "1" : anxietyLevel = "Low";
                                        break;

                                        case "2" : anxietyLevel = "Medium";
                                        break;

                                        case "3" : anxietyLevel = "High";
                                        break;

                                        default: anxietyLevel = "Low";
                                        break;
                                    }

                                    // for the recycler view
                                    if ( anxietyLevel.equals("High"))
                                    highLocations.add(new Location(locationName, anxietyLevel, daysBetween(loc_date, today), lat, lng, nearestLocs ));
//findNearestLocation(lat,lng)

                                    LatLng current = new LatLng(lat,lng);
                                    boolean found = false;
                                    locations.add(new WeightedLatLng( current, loc_AL));

                                    for(WeightedLatLng lis : locations){

                                        if(lis.getPoint().equals(current)){
                                            if(lis.getIntensity() < loc_AL ){
                                                locations.remove(lis);
                                                locations.add(new WeightedLatLng(current, loc_AL));
                                                found = true;
                                            }
                                        }

                                    }

                                    if (!found){
                                        locations.add(new WeightedLatLng(current, loc_AL));
                                    }

                                }


                            }// for every location belonging to this patient (for loop)


                            locationRecyclerView.setHasFixedSize(true);
                            locationAdapter = new locationsAdapter(PatientReport.this, highLocations);
                            locationRecyclerView.setAdapter(locationAdapter);


                        }// end if

                    }// onComplete
                }).addOnFailureListener(new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception e) {

                    }
                });//addOnCompleteListener

    }//location

    private static long daysBetween(Date one, Date two) {

        long difference = (one.getTime() - two.getTime() ) / 86400000 ;
        return Math.abs(difference);

    }


    private void recommendation() {

    }//recommendation

    // Google Calendar
    private void events(){

    }//events

    public void getExtras() {
        Intent intent = getIntent();
        duration = intent.getExtras().getString(Constants.Keys.DURATION);

        if (duration.equals("custom")) {
            startDate = intent.getExtras().getString(Constants.Keys.START_DATE);
            endDate = intent.getExtras().getString(Constants.Keys.END_DATE);
        }
    }


}//end of class